1. Palindrome

public class Palindrome {
    public static boolean isPalindrome(String word) {
      String reverse = ""; 
   
            
      int length = word.length();   
      for ( int i = length - 1; i >= 0; i-- )  {
          
         reverse = reverse + word.charAt(i); 
      }
      if (word.equalsIgnoreCase(reverse))  {
        return true;}
      else  
      { 
        return false;    
      
        
    }}
   
    public static void main(String[] args) {
        System.out.println(Palindrome.isPalindrome("Deleveled"));
    }  }


2.User Input

public class UserInput {
	private static String value;	
    public static class TextInput {

    	public TextInput(){
    		value= new String();
    	}
    	public void add(char c){
    		
    		if(value.length()==0){
    			value=Character.toString(c);
    		}else{
    			value+=c;
    		}
    		
    	}
    	public String getValue(){
    		return value;
    	}
    	
    }

    public static class NumericInput extends TextInput {
    	@Override
    	public void add(char c){
    		if(Character.isDigit(c)){
    			
    			if(value.length()==0){
        			value=Character.toString(c);
        		}else{
        			value+=c;
        		}
    		}
    	}
    }

    public static void main(String[] args) {
        TextInput input = new NumericInput();
        input.add('1');
        input.add('a');
        input.add('0');
        System.out.println(input.getValue());
    }
}

3. Binary Search Tree

class Node {

    public int value;
    public Node left, right;

    public Node(int value, Node left, Node right) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}

public class BinarySearchTree {
    public static boolean contains(Node root, int value) {
        if(root.value==value){
        	return true;
        }
        else if(root.value<value){
        	
        		if(root.right!=null){
        			return contains(root.right, value);
        		}
        		else{
        			return false;
        		}
        }
        else{
        	
        	if(root.left!=null){
        		return contains(root.left, value);
        	}else{
        		return false;
        	}
        	
        }
    }
    
    public static void main(String[] args) {
        Node n1 = new Node(1, null, null);
        Node n3 = new Node(3, null, null);
        Node n2 = new Node(2, n1, n3);
        
        System.out.println(contains(n2, 3));
    }
}

4. Two Sum

public class TwoSum {
    public static int[] findTwoSum(int[] list, int sum) {
        int listLength=list.length;
        int[] match=new int[2];
        
        for(int i=0; i<listLength; i++){
        	for(int j=i+1; j<listLength; j++){
        		if(list[i]+list[j]==sum){
        			match[0]=i;
        			match[1]=j;
        			return match;
        		}
        	}
        }
        return null;	    }

    public static void main(String[] args) {
        int[] indices = findTwoSum(new int[] { 1, 3, 5, 7, 9 }, 10);
        System.out.println(indices[0] + " " + indices[1]);
    }
}

5. Folders

import java.util.Collection;
import java.util.LinkedList;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.InputSource;
import java.io.StringReader;
 
public class Folders {
    public static void searchForLetter(NodeList nodeList, Collection<String> result, char startingLetter) {
        for (int count = 0; count < nodeList.getLength(); count++) {
            Node tempNode = nodeList.item(count);
            Element e = (Element) tempNode;
            String folderName = e.getAttribute("name");
            if (folderName.charAt(0) == startingLetter)
                result.add(folderName);
             
            if (tempNode.getNodeType() == Node.ELEMENT_NODE) {
                if (tempNode.hasChildNodes()) {
                    searchForLetter(tempNode.getChildNodes(), result, startingLetter);
                }
            }
        }
        return;
    }
     
    public static Collection<String> folderNames(String xml, char startingLetter) throws Exception {
        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        Document doc = dBuilder.parse(is);
        doc.getDocumentElement().normalize();
        Collection<String> result = new LinkedList<String>();        
        searchForLetter(doc.getChildNodes(), result, startingLetter);
         
        return result;
    }
     
    public static void main(String[] args) throws Exception {
        String xml =
                "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" +
                "<folder name=\"c\">" +
                    "<folder name=\"program files\">" +
                        "<folder name=\"uninstall information\" />" +
                    "</folder>" +
                    "<folder name=\"users\" />" +
                "</folder>";
 
        Collection<String> names = folderNames(xml, 'u');
        for(String name: names)
            System.out.println(name);
    }
}

6. Sorted Search

import java.util.Arrays;
 
public class SortedSearch {
    public static int countNumbers(int[] sortedArray, int lessThan) {
        return (int) Arrays.stream(sortedArray).filter(x -> x < lessThan).count();
    }
 
    public static void main(String[] args) {
        System.out.println(SortedSearch.countNumbers(new int[] { 1, 3, 5, 7 }, 4));
    }
}

7. Train Composition

class TrainNode{
	int value;
	TrainNode leftTrain;
	TrainNode rightTrain;
	
	public TrainNode(int value){
		this.value=value;
		this.leftTrain=null;
		this.rightTrain=null;
	}
	public void setRightTrain(TrainNode right){
		this.rightTrain=right;
	}
	public void setLeftTrain(TrainNode left){
		this.leftTrain=left;
	}
}

public class TrainComposition {
	private TrainNode leftMost;
	private TrainNode rightMost;
	
	public TrainComposition(){
		leftMost=null;
		rightMost=null;
	}
	
    public void attachWagonFromLeft(int wagonId) {
        TrainNode tmp=new TrainNode(wagonId);
        if(leftMost!=null){
        	
        	leftMost.setLeftTrain(tmp);
        	tmp.setRightTrain(leftMost);
        	leftMost=tmp;
        }else{
        	leftMost=tmp;
        	rightMost=tmp;
        }
    }

    public void attachWagonFromRight(int wagonId) {
    	TrainNode tmp=new TrainNode(wagonId);
        if(rightMost!=null){
        	
        	rightMost.setRightTrain(tmp);
        	tmp.setLeftTrain(rightMost);
        	rightMost=tmp;
        }else{
        	leftMost=tmp;
        	rightMost=tmp;
        }
    }

    public int detachWagonFromLeft() {
        TrainNode tmp;
        if(leftMost!=null){
        	tmp=leftMost;
        	leftMost=leftMost.rightTrain;
        	int tmpValue=tmp.value;
        	return tmpValue;
        }else{
        	return 0;
        }
    }

    public int detachWagonFromRight() {
    	TrainNode tmp;
        if(rightMost!=null){
        	tmp=rightMost;
        	rightMost=rightMost.leftTrain;
        	int tmpValue=tmp.value;
        	return tmpValue;
        }else{
        	return 0;
        }
    }

    public static void main(String[] args) {
        TrainComposition tree = new TrainComposition();
        tree.attachWagonFromLeft(7);
        tree.attachWagonFromLeft(13);
        System.out.println(tree.detachWagonFromRight());  
        System.out.println(tree.detachWagonFromLeft()); 
    }
}

8.  Path

import java.util.ArrayList;
import java.util.Arrays;

public class Path {
    private String path;

    public Path(String path) {
        this.path = path;
    }

    public String getPath() {
        return path;
    }

    public void cd(String newPath) {
        int i=0;
        String[] newPathArray=newPath.split("/"); 
        String[] pathArray=this.path.split("/");
        int newPathLength=newPathArray.length;
        
        ArrayList pathList=new ArrayList(); 
        for(int j=1; j<pathArray.length; j++){
        	pathList.add(pathArray[j]);
        }
        
        if(newPathArray[0].equals("")){
        	
        	pathList.clear();
        	pathList.add(newPathArray[1]);
        	i=i+2;
        }
        
        while(i<newPathLength){
        	int k=pathList.size()-1;
        	if(newPathArray[i].equals("..")){
        		
        		pathList.remove(k);
        	}
        	else{
        		
        		pathList.add(newPathArray[i]);
        	}
        	i++;
        }
       
        StringBuilder updatedPath=new StringBuilder();
        for(int l=0; l<pathList.size(); l++){
        	updatedPath.append("/"+pathList.get(l));
        }
        
       System.out.println(updatedPath);
        this.path=updatedPath.toString();
        
        
    }

    public static void main(String[] args) {
        Path path = new Path("/a/b/c/d");
        path.cd("x/../z");
        System.out.println(path.getPath());
    }
}


9. Playlist 

public class Playlist {
    public static class Song {
        private String name;
        private Song nextSong;
 
        public Song(String name) {
            this.name = name;
        }
   
        public void setNextSong(Song nextSong) {
            this.nextSong = nextSong;
        }
   
        public boolean isRepeatingPlaylist() {
           Song slowStep = this;
           Song fastStep = this;
           while(fastStep != null && fastStep.nextSong != null) {
               slowStep = slowStep.nextSong;          
               fastStep = fastStep.nextSong.nextSong;    
 
               if(slowStep == fastStep)  
                   return true;
           }
           return false;  
        }
    }
   
    public static void main(String[] args) {
        Song first = new Song("Hello");
        Song second = new Song("Eye of the tiger");
   
        first.setNextSong(second);
        second.setNextSong(first);
   
        System.out.println(first.isRepeatingPlaylist());
    }
}

================================end=============================================